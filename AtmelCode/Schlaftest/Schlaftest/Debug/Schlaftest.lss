
Schlaftest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000aa  0000011e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000120  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000883  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000008b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000087  00000000  00000000  000008d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000053  00000000  00000000  00000959  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000de  00000000  00000000  000009ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000a8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000af  00000000  00000000  00000ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00000b5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 53 00 	jmp	0xa6	; 0xa6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <avr/sleep.h>

int main(void)
{
	DDRC = 0;
  80:	17 b8       	out	0x07, r1	; 7
	PORTC = 0;
  82:	18 b8       	out	0x08, r1	; 8
    while(1)
    {
        SMCR |= (1<<SE);
        SMCR |= ((1<<SM1)|(1<<SM0));
        OCR2A = 1;//Sichergehen, dass genug Zeit seit letztem Schlafen vergangen ist
  84:	a3 eb       	ldi	r26, 0xB3	; 179
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	91 e0       	ldi	r25, 0x01	; 1
        while((ASSR & (1<<OCR2AUB)));//Warten bis Schreiben fertig, erst dann darf man schlafen
  8a:	e6 eb       	ldi	r30, 0xB6	; 182
  8c:	f0 e0       	ldi	r31, 0x00	; 0
{
	DDRC = 0;
	PORTC = 0;
    while(1)
    {
        SMCR |= (1<<SE);
  8e:	83 b7       	in	r24, 0x33	; 51
  90:	81 60       	ori	r24, 0x01	; 1
  92:	83 bf       	out	0x33, r24	; 51
        SMCR |= ((1<<SM1)|(1<<SM0));
  94:	83 b7       	in	r24, 0x33	; 51
  96:	86 60       	ori	r24, 0x06	; 6
  98:	83 bf       	out	0x33, r24	; 51
        OCR2A = 1;//Sichergehen, dass genug Zeit seit letztem Schlafen vergangen ist
  9a:	9c 93       	st	X, r25
        while((ASSR & (1<<OCR2AUB)));//Warten bis Schreiben fertig, erst dann darf man schlafen
  9c:	80 81       	ld	r24, Z
  9e:	83 fd       	sbrc	r24, 3
  a0:	fd cf       	rjmp	.-6      	; 0x9c <main+0x1c>
        sleep_cpu();
  a2:	88 95       	sleep
    }
  a4:	f4 cf       	rjmp	.-24     	; 0x8e <main+0xe>

000000a6 <_exit>:
  a6:	f8 94       	cli

000000a8 <__stop_program>:
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <__stop_program>
